version: "3.2"

services:

  # REVIEWS
  mongo:
    container_name: mongodb-reviews
    ports:
      - '27017:27017'
    volumes:
      - 'mongodb-reviews-vol:/data/db'
    image: 'mongo:5.0.5'
    networks:
      - book-store-network

  backend-reviews:
    container_name: backend-reviews
    image: 'chaphe/backend-reviews-image:1.0'
    environment:
      - MONGODB_HOST=mongodb-reviews
    ports:
      - "3000:3000"
    depends_on:
      - mongo
    networks:
      - book-store-network

  frontend-reviews:
    container_name: frontend-reviews
    image: 'chaphe/frontend-reviews-image:1.0'
    environment:
      - REVIEWS_URL=http://localhost:3000
    ports:
      - "81:80"
    depends_on:
      - backend-reviews
    networks:
      - book-store-network

  # CATALOG

  mysql:
    image: 'mysql:8.0.27'
    container_name: mysql-library
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=catalog-library
    ports:
      - '3306:3306'
    volumes:
      - mysql-library-vol:/var/lib/mysql
    networks:
      - book-store-network

  backend-catalog:
    container_name: backend-catalog
    image: 'chaphe/backend-catalog-image:1.0'
    ports:
      - "8081:8081"
    depends_on:
      - mysql
    networks:
      - book-store-network
    #Se agregó la herramienta docker-compose-wait para garantizar que los servicios de mysql estuviesen funcionando al momento de lanza la app de Spring
    #command: sh -c "wget https://github.com/ufoscout/docker-compose-wait/releases/download/2.7.2/wait && chmod +x /wait && /wait && java -jar /usr/share/app.jar"
    environment:
      - WAIT_HOSTS=mysql:3306
      - WAIT_HOSTS_TIMEOUT=250
      - WAIT_SLEEP_INTERVAL=10
      - WAIT_HOST_CONNECT_TIMEOUT=20
      - MYSQL_DB_HOST=mysql-library
      - MYSQL_DB_PORT=3306
      - MYSQL_DB_USERNAME=root
      - MYSQL_DB_PASSWORD=password


  frontend-catalog:
    container_name: frontend-catalog
    image: 'chaphe/frontend-catalog-image:1.0'
    ports:
      - "82:80"
    depends_on:
      - backend-catalog
    networks:
      - book-store-network

  # STORE

  rabbitmq:
    container_name: 'rabbitmq'
    image: rabbitmq:3.9.13-management
    ports:
        - 5672:5672
        - 15672:15672
    networks:
        - book-store-network
    environment:
      - RABBITMQ_DEFAULT_USER=guest 
      - RABBITMQ_DEFAULT_PASS=guest

  backend-store:
    container_name: backend-store
    image: 'chaphe/backend-store-image:1.0'
    ports:
      - "8082:8082"
    depends_on:
      - mysql
      - rabbitmq
    networks:
      - book-store-network
    #Se agregó la herramienta docker-compose-wait para garantizar que los servicios de mysql estuviesen funcionando al momento de lanza la app de Spring
    #command: sh -c "wget https://github.com/ufoscout/docker-compose-wait/releases/download/2.7.2/wait && chmod +x /wait && /wait && java -jar /usr/share/app.jar"
    environment:
      - WAIT_HOSTS=mysql:3306
      - WAIT_HOSTS_TIMEOUT=250
      - WAIT_SLEEP_INTERVAL=10
      - WAIT_HOST_CONNECT_TIMEOUT=20
      - MYSQL_DB_HOST=mysql-library
      - MYSQL_DB_PORT=3306
      - MYSQL_DB_USERNAME=root
      - MYSQL_DB_PASSWORD=password
      - RABBITMQ_HOST=rabbitmq

  frontend-store:
    container_name: frontend-store
    image: 'chaphe/frontend-store-image:1.0'
    environment:
      - STORE_URL=http://137.184.238.11:8082
      - REVIEWS_URL=http://137.184.238.11:3000
      - CATALOG_URL=http://137.184.238.11:8081
    ports:
      - "80:80"
    depends_on:
      - backend-store
    networks:
      - book-store-network


  # Shipping Service
  backend-shipping:
    container_name: backend-shipping
    image: 'chaphe/backend-shipping-image:1.0'
    ports:
      - "3001:3000"
    depends_on:
      - rabbitmq      
    networks:
      - book-store-network
    environment:  
      - RABBITMQ_HOST=rabbitmq          
volumes:
  mysql-library-vol:
    external: false
  mongodb-reviews-vol:
    external: false

networks:
  book-store-network:
    driver: bridge